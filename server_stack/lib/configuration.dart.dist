/*                  This file is part of OpenReception
                   Copyright (C) 2014-, BitStackers K/S

  This is free software;  you can redistribute it and/or modify it
  under terms of the  GNU General Public License  as published by the
  Free Software  Foundation;  either version 3,  or (at your  option) any
  later version. This software is distributed in the hope that it will be
  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  You should have received a copy of the GNU General Public License along with
  this program; see the file COPYING3. If not, see http://www.gnu.org/licenses.
*/

library openreception.configuration;

import 'dart:io' as IO;
import 'package:logging/logging.dart';

/**
 * Log configuration values.
 */
class Log {
  final Level level = Level.ALL;
  final onRecord = logEntryDispatch;

  const Log();
}

/**
 * ESL configuration values.
 */
class EslConfig {
  final String hostname = 'localhost';
  final String password = 'ClueCon';
  final int port = 8021;

  const EslConfig();
}

/**
 * SMTP configuration values
 */
class SmtpConfig {
  final int port = 25;
  final hostname = 'mail.example.com';
  
  const SmtpConfig();
}

/**
 * Standard configuration values, common among all configurations.
 */
abstract class StandardConfig {
  String get externalHostName => 'localhost';

  Log get log => config.logDefaults;

  String get serverToken => 'veeerysecret';

  int get httpPort;

  Uri get externalUri => Uri.parse('http://${externalHostName}:$httpPort');

  const StandardConfig();
}

/**
 * Database configuration values.
 */

class DatabaseConfig {
  final String dsn =
      'postgres://openreception:goodpass@localhost:5432/openreception';

  const DatabaseConfig();
}

/**
 * Call-flow-control server configuration values.
 */
class CallFlowControl extends StandardConfig {
  final String dialoutPrefix = '';
  final String dialoutGateway = 'friendly-gw.sip';

  final EslConfig eslConfig = const EslConfig();

  int get httpPort => 4242;

  /// The user contexts to load peers from. All other contexts will be ignored.
  final Iterable<String> peerContexts = const [
    'default',
    'receptions',
    'test-receptions'
  ];

  const CallFlowControl();
}

/**
 * Configuration server configuration values.
 */
class ConfigServer extends StandardConfig {
  int get httpPort => 4080;

  const ConfigServer();
  
  Uri get authServerUri => config.authServer.externalUri;
  Uri get callFlowControlUri => config.callFlowControl.externalUri;
  Uri get contactServerUri => config.contactServer.externalUri;
  Uri get messageServerUri => config.messageServer.externalUri;
  Uri get notificationServerUri => config.notificationServer.externalUri;
  Uri get notificationSocketUri => config.notificationServer.notificationUri;
  Uri get receptionServerUri => config.receptionServer.externalUri;
  Uri get userServerUri => config.userServer.externalUri;
}

/**
 * Authentication server configuration values.
 */
class AuthServer extends StandardConfig {
  final Duration tokenLifetime = const Duration(hours: 12);
  final String clientId = 'google-client-id';
  final String clientSecret = 'google-client-secret';
  final String serverTokendir = '';
  Uri get clientUri => Uri.parse('http://localhost:3030/Bob/web/bob.html');

  Uri get redirectUri => Uri.parse('${externalUri}/token/oauth2callback');

  @override
  final int httpPort = 4050;

  const AuthServer();
}

/**
 * Contact server configuration values.
 */
class ContactServer extends StandardConfig {
  @override
  final int httpPort = 4010;

  const ContactServer();
}

/**
 * CDR server configuration values.
 */
class CDRServer extends StandardConfig {
  @override
  final int httpPort = 4090;

  const CDRServer();
}

/**
 * Message dispatcher configuration values.
 */
class MessageDispatcher extends StandardConfig {
  final int maxTries = 10;
  final mailerPeriod = const Duration(seconds: 1);

  @override
  final int httpPort = 4070;

  final SmtpConfig smtp = const SmtpConfig();

  const MessageDispatcher();
}

class UserServer extends StandardConfig {
  @override
  final int httpPort = 4030;

  const UserServer();
}

/**
 * Mangement server configuration values
 */
class ManagementServer extends StandardConfig {
  @override
  final int httpPort = 4100;
  Uri get dialplanCompilerServer => Uri.parse('http://localhost:4210');
  final String recordingsDirectory = '/usr/local/freeswitch/sounds/incoming';

  const ManagementServer();
}

/**
 * Message server configuration values
 */
class MessageServer extends StandardConfig {
  @override
  final int httpPort = 4040;

  const MessageServer();
}

/**
 * Nofication server configuration values
 */
class NotificationServer extends StandardConfig {
  @override
  final int httpPort = 4200;

  Uri get notificationUri =>
      Uri.parse('ws://${externalHostName}:$httpPort/notifications');

  const NotificationServer();
}

/**
 * Reception server configuration values
 */
class ReceptionServer extends StandardConfig {
  @override
  final int httpPort = 4000;

  const ReceptionServer();
}

/**
 *
 */
void logEntryDispatch(LogRecord record) {
  if (record.level.value > Level.INFO.value) {
    IO.stderr.writeln(record);
  } else {
    IO.stdout.writeln(record);
  }
}

Configuration config = const Configuration();

/**
 *
 */
class Configuration {
  final logDefaults = const Log();
  final DatabaseConfig database = const DatabaseConfig();

  /// May be 'en' or 'da'
  final systemLanguage = 'en';
  final AuthServer authServer = const AuthServer();
  final CallFlowControl callFlowControl = const CallFlowControl();
  final ConfigServer configserver = const ConfigServer();
  final ContactServer contactServer = const ContactServer();
  final MessageDispatcher messageDispatcher = const MessageDispatcher();
  final CDRServer cdrServer = const CDRServer();
  final ManagementServer managementServer = const ManagementServer();
  final MessageServer messageServer = const MessageServer();
  final NotificationServer notificationServer = const NotificationServer();
  final ReceptionServer receptionServer = const ReceptionServer();
  final UserServer userServer = const UserServer();

  const Configuration();
}