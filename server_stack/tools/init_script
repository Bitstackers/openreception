#!/bin/sh
#
####################
# Basic init script for starting the dart services as daemons - and
# stopping them again.
# After configuring them individually, just run the script with the
# start, stop or restart parmeter.

DART_VM=`which dart`
[ "$DART_VM" = "" ] && echo "No dart vm found in PATH" && exit 1

PID_DIR=$PWD

AUTH_SERVER=$PWD/AuthServer/bin/authserver.dart
AUTH_SERVER_PID_FILE=${PID_DIR}/authserver.pid
AUTH_SERVER_PORT=8080

MISC_SERVER=$PWD/MiscServer/bin/miscserver.dart
MISC_SERVER_PID_FILE=${PID_DIR}/miscserver.pid
MISC_SERVER_PORT=4080

RECEPTION_SERVER=$PWD/ReceptionServer/bin/receptionserver.dart
RECEPTION_SERVER_PID_FILE=${PID_DIR}/receptionserver.pid
RECEPTION_SERVER_PORT_FIRST=4000
RECEPTION_SERVER_PORT_LAST=4005

CONTACT_SERVER=$PWD/ContactServer/bin/contactserver.dart
CONTACT_SERVER_PID_FILE=${PID_DIR}/contactserver.pid
CONTACT_SERVER_PORT_FIRST=4010
CONTACT_SERVER_PORT_LAST=4015

LOG_SERVER=$PWD/LogServer/bin/logserver.dart
LOG_SERVER_PID_FILE=${PID_DIR}/logserver.pid
LOG_SERVER_PORT_FIRST=4020
LOG_SERVER_PORT_LAST=4023

auth_start()
{
   # Authentication server.
   echo -n "Starting an authentication server on port ${AUTH_SERVER_PORT}... "
   (start-stop-daemon --start \
                      --exec /bin/bash \
                      --pidfile ${AUTH_SERVER_PID_FILE} \
                      -m -- -c "exec $DART_VM $AUTH_SERVER --httpport ${AUTH_SERVER_PORT}" | logger -i -t auth_server&) || $ERROR="yes"
      ([ "$ERROR" = "yes" ] && echo "ERROR" && exit 1) || echo "OK"
}

auth_stop()
{
   echo -n "Stopping an authentication server on port ${AUTH_SERVER_PORT}..."
   (start-stop-daemon --stop --exec $DART_VM $AUTH_SERVER --pidfile $AUTH_SERVER_PID_FILE && echo "OK")
   rm $AUTH_SERVER_PID_FILE #Cleanup pid file.

}

auth_restart()
{
  auth_stop
  auth_start
  echo ...
}

bootstrap_start()
{
   # Bootstrapper server
   echo -n "Starting a bootstrapper server on port ${MISC_SERVER_PORT}... "
   (start-stop-daemon --start \
                      --exec /bin/bash \
                      --pidfile ${MISC_SERVER_PID_FILE} \
                      -m -- -c "exec $DART_VM $MISC_SERVER --httpport ${MISC_SERVER_PORT}" | logger -i -t misc_server&) || $ERROR="yes"
      ([ "$ERROR" = "yes" ] && echo "ERROR" && exit 1) || echo "OK"
echo "Failed!"
}

bootstrap_stop()
{
   echo -n "Stopping a bootstrapper server on port ${MISC_SERVER_PORT}..."
   (start-stop-daemon --stop --exec $DART_VM $MISC_SERVER --pidfile $MISC_SERVER_PID_FILE && echo "OK")
   rm $MISC_SERVER_PID_FILE #Cleanup pid file.
}

bootstrap_restart()
{
   bootstrap_stop
   bootstrap_start
   echo ...
}

log_start()
{
   # Log server
   for i in $(seq $LOG_SERVER_PORT_FIRST $LOG_SERVER_PORT_LAST); do
      echo -n "Starting a log server on port ${i}... "
      (start-stop-daemon --start \
                          --exec /bin/bash \
                          --pidfile ${LOG_SERVER_PID_FILE}.${i} \
                          -m -- -c "exec $DART_VM $LOG_SERVER --httpport $i" | logger -i -t log_server&) || $ERROR="yes"
      ([ "$ERROR" = "yes" ] && echo "ERROR" && exit 1) || echo "OK"
    done
}

log_stop()
{
   for i in $(seq $LOG_SERVER_PORT_FIRST $LOG_SERVER_PORT_LAST); do
      echo -n "Stopping a log server on port ${i}... "
      (start-stop-daemon --stop --pidfile ${LOG_SERVER_PID_FILE}.${i} && echo "OK")
      rm $LOG_SERVER_PID_FILE.$i #Cleanup pid file.
   done
}

log_restart()
{
  log_stop
  log_start
   echo ...
}

reception_start()
{
   ERROR=""
   # Reception server.
   for i in $(seq $RECEPTION_SERVER_PORT_FIRST $RECEPTION_SERVER_PORT_LAST); do
      echo -n "Starting a reception server on port ${i}... "
      (start-stop-daemon --start \
                          --exec /bin/bash \
                          --pidfile ${RECEPTION_SERVER_PID_FILE}.${i} \
                          -m -- -c "exec $DART_VM $RECEPTION_SERVER --httpport $i" | logger -i -t reception_server&) || $ERROR="yes"
      ([ "$ERROR" = "yes" ] && echo "ERROR" && exit 1) || echo "OK"
    done
    # We are waiting for the PID file to appear by sleeping :-\
}

reception_stop()
{
   for i in $(seq $RECEPTION_SERVER_PORT_FIRST $RECEPTION_SERVER_PORT_LAST); do
      echo -n "Stopping a reception server on port ${i} "
      (start-stop-daemon --stop --pidfile ${RECEPTION_SERVER_PID_FILE}.${i} && echo "OK")
      rm $RECEPTION_SERVER_PID_FILE.$i #Cleanup pid file.
   done
}

reception_restart()
{
   reception_stop
   reception_start
   echo ...
}

contact_start() {
   ERROR=""
   # Contact server
   for i in $(seq $CONTACT_SERVER_PORT_FIRST $CONTACT_SERVER_PORT_LAST); do
      echo -n "Starting a contact server on port ${i}... "
      (start-stop-daemon --start \
                          --exec /bin/bash \
                          --pidfile ${CONTACT_SERVER_PID_FILE}.${i} \
                          -m -- -c "exec $DART_VM $CONTACT_SERVER --httpport $i" | logger -i -t contact_server&) || $ERROR="yes"
      ([ "$ERROR" = "yes" ] && echo "ERROR" && exit 1) || echo "OK"
    done
    # We are waiting for the PID file to appear by sleeping :-\

}

contact_stop()
{
   for i in $(seq $CONTACT_SERVER_PORT_FIRST $CONTACT_SERVER_PORT_LAST); do
      echo -n "Stopping a contact server on port ${i} "
      (start-stop-daemon --stop --pidfile ${CONTACT_SERVER_PID_FILE}.${i} && echo "OK")
      rm $CONTACT_SERVER_PID_FILE.$i #Cleanup pid file.
   done
}

contact_restart()
{
   contact_stop
   contact_start
   echo ...
}

start_all()
{
   log_start
   auth_start
   bootstrap_start
   reception_start
   contact_start
}

stop_all()
{
   auth_stop
   contact_stop
   reception_stop
   bootstrap_stop
   log_stop
}


case "$1" in
  start)
	start_all
        ;;
  stop)
	stop_all
        ;;
  restart)
        log_restart
        auth_restart
        bootstrap_restart
        contact_restart
        reception_restart
        ;;
  *)
        echo "Usage: $SCRIPTNAME {start|stop|restart}" >&2
        exit 3
        ;;
esac


sleep 1
